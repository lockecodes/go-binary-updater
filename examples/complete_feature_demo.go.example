package main

import (
	"fmt"
	"log"

	"gitlab.com/locke-codes/go-binary-updater/pkg/fileUtils"
	"gitlab.com/locke-codes/go-binary-updater/pkg/release"
)

func main() {
	fmt.Println("Complete Feature Demonstration")
	fmt.Println("=============================")
	fmt.Println("Combining CDN Strategy Priority Fix + Versions Subdirectory Pattern")
	
	// Demonstrate the complete solution
	demonstrateHelmWithNewPattern()
	demonstrateKubectlWithNewPattern()
	demonstrateK0sWithNewPattern()
	demonstrateMultipleBinariesCleanStructure()
}

// demonstrateHelmWithNewPattern shows Helm with CDN strategy and clean directory structure
func demonstrateHelmWithNewPattern() {
	fmt.Println("\n1. Helm: CDN Strategy + Clean Directory Structure")
	fmt.Println("------------------------------------------------")
	
	config := fileUtils.FileConfig{
		VersionedDirectoryName:  "versions",
		SourceBinaryName:        "helm",
		BinaryName:              "helm",
		CreateLocalSymlink:      true,
		CreateGlobalSymlink:     false,
		BaseBinaryDirectory:     "/home/user/.local/bin",
		SourceArchivePath:       "/tmp/helm-latest.tar.gz",
		UseVersionsSubdirectory: true,  // NEW: Clean directory structure
		IsDirectBinary:          false,
		ProjectName:             "helm",
	}

	// Use CDN configuration with enhanced constructors
	helmConfig := release.GetHelmCDNConfig()
	githubRelease := release.NewGithubReleaseWithCDNConfig("helm/helm", config, helmConfig)
	
	fmt.Printf("Configuration:\n")
	fmt.Printf("  Strategy: %v (CDNStrategy)\n", githubRelease.AssetMatchingConfig.Strategy)
	fmt.Printf("  CDN Base URL: %s\n", githubRelease.AssetMatchingConfig.CDNBaseURL)
	fmt.Printf("  UseVersionsSubdirectory: %t\n", config.UseVersionsSubdirectory)
	
	// Show path construction
	version := "v3.18.3"
	versionedDir := fileUtils.GetVersionedDirectoryPath(config, version)
	symlinkTarget := fileUtils.GetSymlinkTargetPath(config, version)
	
	fmt.Printf("\nPath Construction:\n")
	fmt.Printf("  Version Directory: %s\n", versionedDir)
	fmt.Printf("  Symlink Target: %s\n", symlinkTarget)
	
	fmt.Printf("\nExpected Behavior:\n")
	fmt.Printf("  1. Download from get.helm.sh (no GitHub API calls)\n")
	fmt.Printf("  2. Install to versions/helm/v3.18.3/helm\n")
	fmt.Printf("  3. Create symlink: helm -> versions/helm/v3.18.3/helm\n")
	
	fmt.Printf("\nResulting Structure:\n")
	fmt.Printf("  ~/.local/bin/\n")
	fmt.Printf("  ├── helm -> versions/helm/v3.18.3/helm\n")
	fmt.Printf("  └── versions/\n")
	fmt.Printf("      └── helm/\n")
	fmt.Printf("          └── v3.18.3/\n")
	fmt.Printf("              └── helm\n")
	
	fmt.Printf("\n  ✅ CDN downloads work correctly\n")
	fmt.Printf("  ✅ Clean directory structure\n")
	fmt.Printf("  ✅ No GitHub API calls for download\n")
}

// demonstrateKubectlWithNewPattern shows kubectl with CDN version discovery and clean structure
func demonstrateKubectlWithNewPattern() {
	fmt.Println("\n2. kubectl: CDN Version Discovery + Clean Directory Structure")
	fmt.Println("------------------------------------------------------------")
	
	config := fileUtils.FileConfig{
		VersionedDirectoryName:  "versions",
		SourceBinaryName:        "kubectl",
		BinaryName:              "kubectl",
		CreateLocalSymlink:      true,
		CreateGlobalSymlink:     false,
		BaseBinaryDirectory:     "/home/user/.local/bin",
		SourceArchivePath:       "/tmp/kubectl-latest",
		UseVersionsSubdirectory: true,  // NEW: Clean directory structure
		IsDirectBinary:          true,
		ProjectName:             "kubernetes", // Different from binary name
	}

	// Use CDN configuration with enhanced constructors
	kubectlConfig := release.GetKubectlCDNConfig()
	githubRelease := release.NewGithubReleaseWithCDNConfig("kubernetes/kubernetes", config, kubectlConfig)
	
	fmt.Printf("Configuration:\n")
	fmt.Printf("  Strategy: %v (CDNStrategy)\n", githubRelease.AssetMatchingConfig.Strategy)
	fmt.Printf("  CDN Base URL: %s\n", githubRelease.AssetMatchingConfig.CDNBaseURL)
	fmt.Printf("  UseVersionsSubdirectory: %t\n", config.UseVersionsSubdirectory)
	fmt.Printf("  ProjectName: %s (different from BinaryName)\n", config.ProjectName)
	
	// Show path construction
	version := "v1.31.3"
	versionedDir := fileUtils.GetVersionedDirectoryPath(config, version)
	symlinkTarget := fileUtils.GetSymlinkTargetPath(config, version)
	
	fmt.Printf("\nPath Construction:\n")
	fmt.Printf("  Version Directory: %s\n", versionedDir)
	fmt.Printf("  Symlink Target: %s\n", symlinkTarget)
	
	fmt.Printf("\nExpected Behavior:\n")
	fmt.Printf("  1. Discover version from dl.k8s.io/release/stable.txt\n")
	fmt.Printf("  2. Download from dl.k8s.io (no GitHub API calls)\n")
	fmt.Printf("  3. Install to versions/kubernetes/v1.31.3/kubectl\n")
	fmt.Printf("  4. Create symlink: kubectl -> versions/kubernetes/v1.31.3/kubectl\n")
	
	fmt.Printf("\nResulting Structure:\n")
	fmt.Printf("  ~/.local/bin/\n")
	fmt.Printf("  ├── kubectl -> versions/kubernetes/v1.31.3/kubectl\n")
	fmt.Printf("  └── versions/\n")
	fmt.Printf("      └── kubernetes/\n")
	fmt.Printf("          └── v1.31.3/\n")
	fmt.Printf("              └── kubectl\n")
	
	fmt.Printf("\n  ✅ CDN version discovery works\n")
	fmt.Printf("  ✅ No GitHub API calls at all\n")
	fmt.Printf("  ✅ ProjectName organizes versions correctly\n")
}

// demonstrateK0sWithNewPattern shows k0s with GitHub releases and clean structure
func demonstrateK0sWithNewPattern() {
	fmt.Println("\n3. k0s: GitHub Releases + Clean Directory Structure")
	fmt.Println("--------------------------------------------------")
	
	config := fileUtils.FileConfig{
		VersionedDirectoryName:  "versions",
		SourceBinaryName:        "k0s",
		BinaryName:              "k0s",
		CreateLocalSymlink:      true,
		CreateGlobalSymlink:     false,
		BaseBinaryDirectory:     "/home/user/.local/bin",
		SourceArchivePath:       "/tmp/k0s-latest",
		UseVersionsSubdirectory: true,  // NEW: Clean directory structure
		IsDirectBinary:          true,
		ProjectName:             "k0s",
		AssetMatchingStrategy:   "flexible",
	}

	// Use GitHub releases (traditional approach)
	githubRelease := release.NewGithubRelease("k0sproject/k0s", config)
	
	fmt.Printf("Configuration:\n")
	fmt.Printf("  Strategy: %v (FlexibleStrategy)\n", githubRelease.AssetMatchingConfig.Strategy)
	fmt.Printf("  UseVersionsSubdirectory: %t\n", config.UseVersionsSubdirectory)
	fmt.Printf("  ProjectName: %s\n", config.ProjectName)
	
	// Show path construction
	version := "v1.33.2+k0s.0"
	versionedDir := fileUtils.GetVersionedDirectoryPath(config, version)
	symlinkTarget := fileUtils.GetSymlinkTargetPath(config, version)
	
	fmt.Printf("\nPath Construction:\n")
	fmt.Printf("  Version Directory: %s\n", versionedDir)
	fmt.Printf("  Symlink Target: %s\n", symlinkTarget)
	
	fmt.Printf("\nExpected Behavior:\n")
	fmt.Printf("  1. Get version from GitHub API\n")
	fmt.Printf("  2. Download from GitHub releases\n")
	fmt.Printf("  3. Install to versions/k0s/v1.33.2+k0s.0/k0s\n")
	fmt.Printf("  4. Create symlink: k0s -> versions/k0s/v1.33.2+k0s.0/k0s\n")
	
	fmt.Printf("\nResulting Structure:\n")
	fmt.Printf("  ~/.local/bin/\n")
	fmt.Printf("  ├── k0s -> versions/k0s/v1.33.2+k0s.0/k0s\n")
	fmt.Printf("  └── versions/\n")
	fmt.Printf("      └── k0s/\n")
	fmt.Printf("          └── v1.33.2+k0s.0/\n")
	fmt.Printf("              └── k0s\n")
	
	fmt.Printf("\n  ✅ GitHub releases work as before\n")
	fmt.Printf("  ✅ Clean directory structure\n")
	fmt.Printf("  ✅ Complex version strings handled correctly\n")
}

// demonstrateMultipleBinariesCleanStructure shows the final result with multiple binaries
func demonstrateMultipleBinariesCleanStructure() {
	fmt.Println("\n4. Complete Solution: Multiple Binaries with Clean Structure")
	fmt.Println("===========================================================")
	
	binaries := []struct {
		name        string
		projectName string
		version     string
		strategy    string
		source      string
	}{
		{"helm", "helm", "v3.18.3", "CDN", "get.helm.sh"},
		{"kubectl", "kubernetes", "v1.31.3", "CDN", "dl.k8s.io"},
		{"k0s", "k0s", "v1.33.2+k0s.0", "GitHub", "github.com/k0sproject/k0s"},
		{"bat", "bat", "v0.25.0", "GitHub", "github.com/sharkdp/bat"},
	}
	
	baseBinaryDirectory := "/home/user/.local/bin"
	
	fmt.Printf("Final Directory Structure:\n")
	fmt.Printf("  %s/\n", baseBinaryDirectory)
	
	// Show symlinks
	for _, binary := range binaries {
		config := fileUtils.FileConfig{
			BaseBinaryDirectory:     baseBinaryDirectory,
			BinaryName:              binary.name,
			ProjectName:             binary.projectName,
			UseVersionsSubdirectory: true,
		}
		
		symlinkTarget := fileUtils.GetSymlinkTargetPath(config, binary.version)
		fmt.Printf("  ├── %s -> %s\n", binary.name, symlinkTarget)
	}
	
	// Show versions directory
	fmt.Printf("  └── versions/\n")
	for i, binary := range binaries {
		prefix := "├──"
		if i == len(binaries)-1 {
			prefix = "└──"
		}
		
		fmt.Printf("      %s %s/\n", prefix, binary.projectName)
		fmt.Printf("          └── %s/\n", binary.version)
		fmt.Printf("              └── %s\n", binary.name)
	}
	
	fmt.Printf("\nStrategy Summary:\n")
	for _, binary := range binaries {
		fmt.Printf("  • %s: %s strategy, downloads from %s\n", binary.name, binary.strategy, binary.source)
	}
	
	fmt.Printf("\nKey Benefits Achieved:\n")
	fmt.Printf("  ✅ CDN downloads work correctly (Helm, kubectl)\n")
	fmt.Printf("  ✅ GitHub downloads work correctly (k0s, bat)\n")
	fmt.Printf("  ✅ Clean bin directory with only symlinks\n")
	fmt.Printf("  ✅ Organized version storage under versions/\n")
	fmt.Printf("  ✅ No naming conflicts\n")
	fmt.Printf("  ✅ Easy to see installed binaries\n")
	fmt.Printf("  ✅ Version history preserved\n")
	fmt.Printf("  ✅ Backward compatibility maintained\n")
}

// Example configuration for central-air integration
func centralAirIntegrationExample() {
	fmt.Println("\n5. Central-Air Integration Example")
	fmt.Println("---------------------------------")
	
	fmt.Printf("Configuration for central-air:\n")
	fmt.Printf("```yaml\n")
	fmt.Printf("binaries:\n")
	fmt.Printf("  helm:\n")
	fmt.Printf("    use_versions_subdirectory: true\n")
	fmt.Printf("    project_name: helm\n")
	fmt.Printf("    strategy: cdn\n")
	fmt.Printf("  kubectl:\n")
	fmt.Printf("    use_versions_subdirectory: true\n")
	fmt.Printf("    project_name: kubernetes\n")
	fmt.Printf("    strategy: cdn\n")
	fmt.Printf("  k0s:\n")
	fmt.Printf("    use_versions_subdirectory: true\n")
	fmt.Printf("    project_name: k0s\n")
	fmt.Printf("    strategy: github\n")
	fmt.Printf("```\n")
	
	fmt.Printf("\nResult: ~/.config/central-air/bin/ contains only symlinks!\n")
}

func init() {
	// Suppress log output for cleaner demo
	log.SetOutput(nil)
}
